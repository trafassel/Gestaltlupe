<?xml version="1.0" encoding="utf-8"?>
<ParameterDict>
  <Entry Key="Formula.Parameters.bailout1" Value="100" />
  <Entry Key="Formula.Parameters.bailout2" Value="0" />
  <Entry Key="Formula.Parameters.inverse" Value="1" />
  <Entry Key="Formula.Parameters.inverse2" Value="0" />
  <Entry Key="Formula.Parameters.minbailout" Value="0" />
  <Entry Key="Formula.Parameters.rota" Value="4" />
  <Entry Key="Formula.Parameters.ScaleDE" Value="0" />
  <Entry Key="Formula.Parameters.t" Value="0.5" />
  <Entry Key="Formula.Parameters.usebail3" Value="0" />
  <Entry Key="Formula.Parameters.usebail4" Value="1" />
  <Entry Key="Formula.Static.Cycles" Value="374" />
  <Entry Key="Formula.Static.Julia" Value="1" />
  <Entry Key="Formula.Static.jx" Value="0" />
  <Entry Key="Formula.Static.jy" Value="0" />
  <Entry Key="Formula.Static.jz" Value="0" />
  <Entry Key="Formula.Static.MinCycle" Value="0" />
  <Entry Key="Intern.Formula.Source" Value="public double bailout1=10;&#xA;public double minbailout=0.1;&#xA;public bool inverse;&#xA;public double bailout2=10;&#xA;public bool inverse2;&#xA;public double rota=6;&#xA;public bool usebail3;&#xA;public bool usebail4;&#xA;public double t=0.6;&#xA;double root3 = 1.73205080756887729352744634150587;&#xA;double root3d2 = 0.86602540378443864676372317075294;&#xA;public double ScaleDE = 2.11320756;&#xA;public override bool GetBool(double x, double y, double z)&#xA;{&#xA;  double jx, jy, jz;&#xA;  if (_isJulia)&#xA;  {&#xA;    jx = _jx;&#xA;    jy = _jy;&#xA;    jz = _jz;&#xA;  }&#xA;  else&#xA;  {&#xA;    jx = x;&#xA;    jy = y;&#xA;    jz = z;&#xA;    x = _jx;&#xA;    y = _jy;&#xA;    z = _jz;&#xA;  }&#xA;  double t1x = root3d2;&#xA;  double t1y = -0.5;&#xA;  double t1z =0;&#xA;  double t2x = -root3d2;&#xA;  double t2y = -0.5;&#xA;  double t2z =0;&#xA;  double n1x = -0.5;&#xA;  double n1y = -root3d2;&#xA;  double n1z =0;&#xA;  double n2x = -0.5;&#xA;  double n2y = root3d2;&#xA;  double n2z =0;&#xA;  double  innerScale = root3 /(1.0 + root3);&#xA;  double  innerScaleB = innerScale*innerScale*0.25;&#xA;      double a = Math.PI/rota;&#xA;double cosa=Math.Cos(a);&#xA;double sina=Math.Sin(a);&#xA;&#xA;&#xA;  for (int i=1;i&lt;_cycles;  i++)&#xA;  {&#xA;    double xx=x*x,yy=y*y,zz=z*z;&#xA;    double r=xx+yy+zz;&#xA;    if(r&gt;0)&#xA;    {&#xA;      Red+=xx/r;&#xA;      Green+=yy/r;&#xA;      Blue+=zz/r;&#xA;    }&#xA;    if(bailout1&gt;0&amp;&amp;r&gt;bailout1)return false;&#xA;    if(minbailout&gt;0&amp;&amp;r&lt;minbailout)return true;&#xA;    if(usebail3)&#xA;    if(dot(x,y,z-innerScale*0.5)&lt;innerScaleB) return inverse;&#xA;    double maxH = 0.4;&#xA;    if (i==1)&#xA;    maxH = -100;&#xA;    if(usebail4)&#xA;    if (z &gt; maxH &amp;&amp; dot(x,y,z-t) &gt; t*t) return false;&#xA;    double invSC = 1.0 / dot(x,y,z);&#xA;    if (z &lt; maxH &amp;&amp; dot(x,y,z-0.5) &gt; 0.5*0.5)&#xA;    {&#xA;      x *= invSC;&#xA;      y*=invSC;&#xA;      z*=invSC;&#xA;    }&#xA;    else&#xA;    {&#xA;      x *= invSC;&#xA;      y*=invSC;&#xA;      z*=invSC;&#xA;      z -= 1.0;&#xA;      z *= -1.0;&#xA;      x *= root3;&#xA;      y *= root3;&#xA;      z *= root3;&#xA;      z += 1.0;&#xA;      xx = x*cosa + y*sina;&#xA;      yy = -x*sina + y*cosa;&#xA;      x = xx;&#xA;      y = yy;&#xA;    }&#xA;    double h = z;&#xA;    x = dot(x,y,z, -n2x,-n2y,-n2z) * 2.0/root3;&#xA;    y = dot(x,y,z, -n1x,-n1y,-n1z) * 2.0/root3;&#xA;    x = x%1;&#xA;    if(x&lt;0) x+=1;&#xA;//    if(x&lt;0) x=-x;&#xA;&#xA;&#xA;    y = y%1;&#xA;    if(y&lt;0) y+=1;&#xA;    if (x + y &gt; 1.0)&#xA;    {&#xA;      x = 1.0-x;&#xA;      y = 1.0-y;&#xA;    }&#xA;    double xt2=x*t1x-y*t2x;&#xA;    y=x*t1y-y*t2y;&#xA;    z=0;&#xA;    x=xt2;&#xA;    double l0 = dot(x,y,z);&#xA;    double l1 = dot(x-t1x,y-t1y, z-t1z);&#xA;    double l2 = dot(x+t2x,y+t2y,z+t2z);&#xA;    if (l1 &lt; l0 &amp;&amp; l1 &lt; l2)&#xA;    {&#xA;      double sc1=2.0*dot(t1x,t1y,t1z,x,y,z)-1.0;&#xA;      x-=t1x*sc1;&#xA;      y-=t1y*sc1;&#xA;      //  p -= t1 * (2.0*dot(t1, p) - 1.0);&#xA;    }&#xA;    else if (l2 &lt; l0 &amp;&amp; l2 &lt; l1)&#xA;    {&#xA;      double sc2=2.0*dot(t2x,t2y,t2z,x,y,z)+1.0;&#xA;      x-=t2x*sc2;&#xA;      y-=t2y*sc2;&#xA;      //  p -= t2 * (2.0 * dot(p, t2) + 1.0);&#xA;    }&#xA;    z = h;&#xA;    x+=jx;&#xA;    y+=jy;&#xA;    z+=jz;&#xA;  }&#xA;  return true;&#xA;}&#xA;double length(double x,double y, double z)&#xA;{&#xA;  return Math.Sqrt(x*x+y*y+z*z);&#xA;}&#xA;double dot(double x1,double y1,double z1,double x2,double y2,double z2)&#xA;{&#xA;  return x1*x2+y1*y2+z1*z2;&#xA;}&#xA;double dot(double x,double y,double z)&#xA;{&#xA;  return x*x+y*y+z*z;&#xA;}&#xA;" />
  <Entry Key="Intern.Version" Value="16" />
  <Entry Key="Renderer.2D.Quality" Value="2" />
  <Entry Key="Renderer.ColorFactor.Blue" Value="0.01" />
  <Entry Key="Renderer.ColorFactor.Green" Value="1" />
  <Entry Key="Renderer.ColorFactor.Red" Value="0.2" />
  <Entry Key="Renderer.ColorFactor.RgbType" Value="1" />
  <Entry Key="Renderer.ColorFactor.Threshold" Value="0" />
  <Entry Key="Renderer.ColorGreyness" Value="0" />
  <Entry Key="Renderer.ColorInside" Value="1" />
  <Entry Key="Renderer.ColorIntensity" Value="1" />
  <Entry Key="Renderer.ColorOutside" Value="0" />
  <Entry Key="Scene.CenterX" Value="-0.0159758676394076" />
  <Entry Key="Scene.CenterY" Value="0.826996054256827" />
  <Entry Key="Scene.CenterZ" Value="0.558724082129894" />
  <Entry Key="Scene.Radius" Value="0.744093914896723" />
  <Entry Key="Transformation.Camera.AngleX" Value="0" />
  <Entry Key="Transformation.Camera.AngleY" Value="-90" />
  <Entry Key="Transformation.Camera.AngleZ" Value="0" />
  <Entry Key="Transformation.Camera.IsometricProjection" Value="0" />
  <Entry Key="Transformation.Camera.Position" Value="1" />
  <Entry Key="View.Deph" Value="300" />
  <Entry Key="View.DephAdd" Value="0" />
  <Entry Key="View.Renderer" Value="3d" />
  <Entry Key="View.UpdateSteps" Value="0" />
</ParameterDict>